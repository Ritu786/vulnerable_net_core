trigger:
  branches:
    include:
      - main
      - master

pr:
  branches:
    include:
      - main
      - master

variables:
- group: blackduck-secrets
- name: buildConfiguration
  value: 'Release'
- name: projectName
  value: 'VulnerableNetCoreDemo'

stages:
- stage: Build
  displayName: Build & Test (.NET)
  jobs:
  - job: build_dotnet
    displayName: Build .NET
    pool:
      name: coverity-win
    steps:
    - checkout: self
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.x'
    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: 'restore'
        projects: '**/*.sln'
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: 'build'
        projects: '**/*.sln'
        arguments: '--configuration $(buildConfiguration)'
    - task: DotNetCoreCLI@2
      displayName: Test
      inputs:
        command: 'test'
        projects: '**/*Tests/*.csproj'
        arguments: '--configuration $(buildConfiguration) --no-build'

- stage: Coverity
  displayName: Coverity SAST
  dependsOn: Build
  jobs:
  - job: coverity_sast
    displayName: Coverity SAST
    pool:
      name: coverity-win
    steps:
    - checkout: self
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.x'
    - task: DownloadSecureFile@1
      name: covAuth
      inputs:
        secureFile: 'auth-key.txt'
    - powershell: |
        $ErrorActionPreference = 'Stop'

        # Updated Coverity bin path
        $covBin = "C:\Program Files\Coverity\Coverity Static Analysis\bin"
        if (!(Test-Path $covBin)) { throw "Coverity bin not found at $covBin" }
        $env:PATH = "$covBin;$env:PATH"

        # Ensure artifact staging exists and pick binlog path there
        New-Item -ItemType Directory -Force -Path "$(Build.ArtifactStagingDirectory)" | Out-Null
        $binlog = Join-Path "$(Build.ArtifactStagingDirectory)" "msbuild.binlog"

        # Find solution
        $sln = Get-ChildItem -Path "$(Build.SourcesDirectory)" -Filter *.sln -Recurse | Select-Object -First 1
        if (-not $sln) { throw "No .sln found under $(Build.SourcesDirectory)" }
        Write-Host "Solution: $($sln.FullName)"

        # 1) Restore first (fresh workspace)
        dotnet restore "`"$($sln.FullName)`""

        # 2) Run cov-dotnet capture
        if (Test-Path cov-int) { Remove-Item cov-int -Recurse -Force }
        & "$covBin\cov-dotnet.exe" capture --dir cov-int --solution "$($sln.FullName)" --configuration Release --no-default-configuration --msbuild-verbosity diag --msbuild-log "$binlog"
        $exit = $LASTEXITCODE

        if ($exit -ne 0) {
          if (Test-Path $binlog) {
            Write-Error "cov-dotnet capture failed (exit $exit). Binlog at $binlog will be published."
          } else {
            Write-Error "cov-dotnet capture failed (exit $exit) and binlog missing; check preceding error output."
          }
        }

        # 3) Analyze & Commit (only if build produced TUs)
        & "$covBin\cov-analyze.exe" --dir cov-int --all
        & "$covBin\cov-format-errors.exe" --dir cov-int --html-output cov-html
        & "$covBin\cov-commit-defects.exe" --dir cov-int `
            --url "$(COVERITY_URL)" `
            --stream "$(COVERITY_STREAM)" `
            --auth-key-file "$(covAuth.secureFilePath)" `
            --description "ADO $(Build.BuildNumber) $(Build.SourceVersion)" `
            --on-new-cert trust
      displayName: Capture, Analyze & Commit

    # Pre-step: set variable if binlog exists
    - powershell: |
        if (Test-Path "$(Build.ArtifactStagingDirectory)/msbuild.binlog") {
          Write-Host "##vso[task.setvariable variable=publishBinlog]true"
        } else {
          Write-Host "##vso[task.setvariable variable=publishBinlog]false"
        }
      displayName: Check for binlog

    # Only publish artifact if binlog exists
    - task: PublishBuildArtifacts@1
      displayName: Publish MSBuild binlog
      condition: eq(variables['publishBinlog'], 'true')
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/msbuild.binlog'
        ArtifactName: 'msbuild-logs'

    - task: PublishBuildArtifacts@1
      displayName: Publish Coverity HTML
      condition: succeeded()
      inputs:
        PathtoPublish: 'cov-html'
        ArtifactName: 'coverity-report'

- stage: BlackDuck
  displayName: Black Duck SCA
  dependsOn: Coverity
  jobs:
  - job: bd_scan
    displayName: Detect Scan
    pool:
      name: blackduck-linux
    steps:
    - checkout: self
    - bash: |
        set -e
        curl -s -L https://detect.synopsys.com/detect9.sh -o detect.sh
        chmod +x detect.sh
        ./detect.sh \
          --blackduck.url="$(BD_URL)" \
          --blackduck.api.token="$(BD_API_TOKEN)" \
          --blackduck.trust.cert=true \
          --detect.project.name="@HooliCorp/vulnerable_net_core" \
          --detect.project.version.name="$(Build.SourceVersion)" \
          --detect.policy.check=true \
          --detect.cleanup=true \
          --detect.timeout=1200
      displayName: Black Duck Detect (SCA)