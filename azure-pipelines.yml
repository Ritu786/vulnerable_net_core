trigger:
  branches:
    include:
      - main
      - master

pr:
  branches:
    include:
      - main
      - master

variables:
- group: blackduck-secrets
- name: buildConfiguration
  value: 'Release'
- name: projectName
  value: 'VulnerableNetCoreDemo'

stages:
- stage: Build
  displayName: Build & Test (.NET)
  jobs:
  - job: build_dotnet
    displayName: Build .NET
    pool:
      name: coverity-win
    steps:
    - checkout: self
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.x'
    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: 'restore'
        projects: '**/*.sln'
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: 'build'
        projects: '**/*.sln'
        arguments: '--configuration $(buildConfiguration)'
    - task: DotNetCoreCLI@2
      displayName: Test
      inputs:
        command: 'test'
        projects: '**/*Tests/*.csproj'
        arguments: '--configuration $(buildConfiguration) --no-build'

- stage: Coverity
  displayName: Coverity SAST
  dependsOn: Build
  jobs:
  - job: coverity_sast
    displayName: Coverity SAST
    pool:
      name: coverity-win
    steps:
    - checkout: self
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.x'
    - task: DownloadSecureFile@1
      name: covAuth
      inputs:
        secureFile: 'auth-key.txt'
    - powershell: |
        $ErrorActionPreference = 'Stop'

        # Paths & env
        $covBin = "C:\Program Files\Coverity\cov-analysis-win64-2025.6.0\bin"
        if (!(Test-Path $covBin)) { throw "Coverity bin not found at $covBin" }
        $env:PATH = "$covBin;$env:PATH"

        # Ensure artifact staging exists and pick binlog path there
        New-Item -ItemType Directory -Force -Path "$(Build.ArtifactStagingDirectory)" | Out-Null
        $binlog = Join-Path "$(Build.ArtifactStagingDirectory)" "msbuild.binlog"

        # Help MSBuild find the .NET SDK that UseDotNet installed
        $dotnetPath = (Get-Command dotnet).Source
        $dotnetDir  = Split-Path $dotnetPath -Parent
        $env:DOTNET_ROOT = $dotnetDir
        $env:DOTNET_MSBUILD_SDK_RESOLVER_CLI_DIR = $dotnetDir
        $env:DOTNET_MULTILEVEL_LOOKUP = "0"

        Write-Host "dotnet: $dotnetPath"
        & dotnet --info
        & dotnet --list-sdks

        # Locate MSBuild.exe via vswhere (absolute path)
        $vswhere = "${env:ProgramFiles(x86)}\Microsoft Visual Studio\Installer\vswhere.exe"
        if (!(Test-Path $vswhere)) { throw "vswhere not found at $vswhere" }
        $msbuild = & $vswhere -latest -products * -requires Microsoft.Component.MSBuild -find "MSBuild\**\Bin\amd64\MSBuild.exe" | Select-Object -First 1
        if (-not $msbuild) {
          $msbuild = & $vswhere -latest -products * -requires Microsoft.Component.MSBuild -find "MSBuild\**\Bin\MSBuild.exe" | Select-Object -First 1
        }
        if (-not $msbuild) { throw "MSBuild.exe not found by vswhere" }
        & "$msbuild" -version

        # Find solution
        $sln = Get-ChildItem -Path "$(Build.SourcesDirectory)" -Filter *.sln -Recurse | Select-Object -First 1
        if (-not $sln) { throw "No .sln found under $(Build.SourcesDirectory)" }
        Write-Host "Solution: $($sln.FullName)"

        # 1) Restore first (fresh workspace)
        dotnet restore "`"$($sln.FullName)`""

        # 2) Build under Coverity with dotnet msbuild (binlog to artifact staging)
        if (Test-Path cov-int) { Remove-Item cov-int -Recurse -Force }

        Write-Host "cov-build (dotnet msbuild): dotnet msbuild `"$($sln.FullName)`" /t:Rebuild /p:Configuration=$(buildConfiguration) /bl:`"$binlog`""
        cov-build --dir cov-int dotnet msbuild "$($sln.FullName)" /t:Rebuild /p:Configuration=$(buildConfiguration) /bl:"$binlog"
        $exit = $LASTEXITCODE

        if ($exit -ne 0) {
          if (Test-Path $binlog) {
            Write-Error "Build failed (exit $exit). Binlog at $binlog will be published."
          } else {
            Write-Error "Build failed (exit $exit) and binlog missing; check preceding error output."
          }
        }

        # 3) Analyze & Commit (only if build produced TUs)
        cov-analyze --dir cov-int --all
        cov-format-errors --dir cov-int --html-output cov-html
        cov-commit-defects --dir cov-int `
          --url "$(COVERITY_URL)" `
          --stream "$(COVERITY_STREAM)" `
          --auth-key-file "$(covAuth.secureFilePath)" `
          --description "ADO $(Build.BuildNumber) $(Build.SourceVersion)" `
          --on-new-cert trust
      displayName: Capture, Analyze & Commit

    # Pre-step: set variable if binlog exists
    - powershell: |
        if (Test-Path "$(Build.ArtifactStagingDirectory)/msbuild.binlog") {
          Write-Host "##vso[task.setvariable variable=publishBinlog]true"
        } else {
          Write-Host "##vso[task.setvariable variable=publishBinlog]false"
        }
      displayName: Check for binlog

    # Only publish artifact if binlog exists
    - task: PublishBuildArtifacts@1
      displayName: Publish MSBuild binlog
      condition: eq(variables['publishBinlog'], 'true')
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/msbuild.binlog'
        ArtifactName: 'msbuild-logs'

    - task: PublishBuildArtifacts@1
      displayName: Publish Coverity HTML
      condition: succeeded()
      inputs:
        PathtoPublish: 'cov-html'
        ArtifactName: 'coverity-report'

- stage: BlackDuck
  displayName: Black Duck SCA
  dependsOn: Coverity
  jobs:
  - job: bd_scan
    displayName: Detect Scan
    pool:
      name: blackduck-linux
    steps:
    - checkout: self
    - bash: |
        set -e
        curl -s -L https://detect.synopsys.com/detect9.sh -o detect.sh
        chmod +x detect.sh
        ./detect.sh \
          --blackduck.url="$(BD_URL)" \
          --blackduck.api.token="$(BD_API_TOKEN)" \
          --blackduck.trust.cert=true \
          --detect.project.name="@HooliCorp/vulnerable_net_core" \
          --detect.project.version.name="$(Build.SourceVersion)" \
          --detect.policy.check=true \
          --detect.cleanup=true \
          --detect.timeout=1200
      displayName: Black Duck Detect (SCA)