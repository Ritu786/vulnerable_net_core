trigger:
  branches:
    include: [ main, master ]

pr:
  branches:
    include: [ main, master ]

variables:
- group: blackduck-secrets
- name: buildConfiguration
  value: 'Release'
- name: projectName
  value: 'VulnerableNetCoreDemo'

stages:
# 1) Build & Test on Windows (coverity-win)
- stage: Build
  displayName: Build & Test (.NET)
  jobs:
  - job: build_dotnet
    pool: { name: coverity-win }
    steps:
    - checkout: self
    # ✅ need 3.1 SDK for netcoreapp3.1
    - task: UseDotNet@2
      inputs: { packageType: 'sdk', version: '3.1.426' }
    - task: UseDotNet@2
      inputs: { packageType: 'sdk', version: '8.x' }
    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs: { command: 'restore', projects: '**/*.sln' }
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: 'build'
        projects: '**/*.sln'
        arguments: '--configuration $(buildConfiguration)'
    - task: DotNetCoreCLI@2
      displayName: Test
      inputs:
        command: 'test'
        projects: '**/*Tests/*.csproj'
        arguments: '--configuration $(buildConfiguration) --no-build'

# 2) Coverity SAST on Windows (MSBuild capture)
- stage: Coverity
  displayName: Coverity SAST
  dependsOn: Build
  jobs:
  - job: coverity_sast
    pool: { name: coverity-win }
    steps:
    - checkout: self
    # ✅ install both SDKs here too (fresh job/fresh tools folder)
    - task: UseDotNet@2
      inputs: { packageType: 'sdk', version: '3.1.426' }
    - task: UseDotNet@2
      inputs: { packageType: 'sdk', version: '8.x' }

    - task: DownloadSecureFile@1
      name: covAuth
      inputs: { secureFile: 'auth-key.txt' }

    - powershell: |
        $ErrorActionPreference = 'Stop'

        # --- Find Coverity bin (accept both layouts) ---
        $covBins = @(
          'C:\Program Files\Coverity\Coverity Static Analysis\bin',
          (Get-ChildItem 'C:\Program Files\Coverity\' -Directory -Filter 'cov-analysis-win64-*' -ErrorAction SilentlyContinue |
            Sort-Object Name -Descending | Select-Object -First 1 | ForEach-Object { Join-Path $_.FullName 'bin' })
        ) | Where-Object { $_ -and (Test-Path $_) }

        if (-not $covBins -or -not (Test-Path $covBins[0])) { throw "Coverity bin not found." }
        $covBin = $covBins[0]
        $env:PATH = "$covBin;$env:PATH"
        Write-Host "Using Coverity bin: $covBin"

        # --- Logs folder + binlog path ---
        New-Item -ItemType Directory -Force -Path "$(Build.ArtifactStagingDirectory)\logs" | Out-Null
        $logsDir = "$(Build.ArtifactStagingDirectory)\logs"
        $binlog  = Join-Path $logsDir "msbuild.binlog"
        $txtlog  = Join-Path $logsDir "msbuild.txt"

        # --- Choose solution ---
        $sln = Get-ChildItem -Path "$(Build.SourcesDirectory)" -Filter *.sln -Recurse | Select-Object -First 1
        if (-not $sln) { throw "No .sln found under $(Build.SourcesDirectory)" }
        Write-Host "Solution: $($sln.FullName)"

        # 1) Restore (fresh job)
        dotnet restore "`"$($sln.FullName)`""

        # 2) Capture build under Coverity using dotnet msbuild
        if (Test-Path cov-int) { Remove-Item cov-int -Recurse -Force }
        Write-Host "cov-build capture with 'dotnet msbuild'..."
        cov-build --dir cov-int dotnet msbuild "`"$($sln.FullName)`"" /m `
          /t:Rebuild /p:Configuration=$(buildConfiguration) `
          /p:GenerateFullPaths=true /nr:false `
          /bl:"$binlog" /flp:LogFile="$txtlog";verbosity=normal
        if ($LASTEXITCODE -ne 0) { throw "Build failed. See $binlog / $txtlog." }

        # 3) Analyze & Commit
        cov-analyze --dir cov-int --all
        cov-format-errors --dir cov-int --html-output cov-html
        cov-commit-defects --dir cov-int `
          --url "$(COVERITY_URL)" `
          --stream "$(COVERITY_STREAM)" `
          --auth-key-file "$(covAuth.secureFilePath)" `
          --description "ADO $(Build.BuildNumber) $(Build.SourceVersion)" `
          --on-new-cert trust
      displayName: Capture, Analyze & Commit

    # Always publish logs so we can diagnose if the build fails
    - task: PublishBuildArtifacts@1
      displayName: Publish diagnostic logs
      condition: always()
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/logs'
        ArtifactName: 'diag-logs'

    - task: PublishBuildArtifacts@1
      displayName: Publish Coverity HTML
      condition: succeeded()
      inputs:
        PathtoPublish: 'cov-html'
        ArtifactName: 'coverity-report'

# 3) Black Duck SCA on Linux
- stage: BlackDuck
  displayName: Black Duck SCA
  dependsOn: Coverity
  jobs:
  - job: bd_scan
    pool: { name: blackduck-linux }
    steps:
    - checkout: self
    - bash: |
        set -e
        curl -s -L https://detect.synopsys.com/detect9.sh -o detect.sh
        chmod +x detect.sh
        ./detect.sh \
          --blackduck.url="$(BD_URL)" \
          --blackduck.api.token="$(BD_API_TOKEN)" \
          --blackduck.trust.cert=true \
          --detect.project.name="@HooliCorp/vulnerable_net_core" \
          --detect.project.version.name="$(Build.SourceVersion)" \
          --detect.policy.check=true \
          --detect.cleanup=true \
          --detect.timeout=1200
      displayName: Black Duck Detect (SCA)
