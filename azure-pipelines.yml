trigger:
  branches:
    include: [ main, master ]

pr:
  branches:
    include: [ main, master ]

variables:
- group: blackduck-secrets
- name: COVERITY_BIN
  value: 'C:\Program Files\Coverity\Coverity Static Analysis\bin'
- name: buildConfiguration
  value: 'Release'
- name: projectName
  value: 'VulnerableNetCoreDemo'

stages:
# 1) Build & Test on Windows (coverity-win)
- stage: Build
  displayName: Build & Test (.NET)
  jobs:
  - job: build_dotnet
    pool: { name: coverity-win }
    steps:
    - checkout: self
    # âœ… need 3.1 SDK for netcoreapp3.1
    - task: UseDotNet@2
      inputs: { packageType: 'sdk', version: '3.1.426' }
    - task: UseDotNet@2
      inputs: { packageType: 'sdk', version: '8.x' }
    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs: { command: 'restore', projects: '**/*.sln' }
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        command: 'build'
        projects: '**/*.sln'
        arguments: '--configuration $(buildConfiguration)'
    - task: DotNetCoreCLI@2
      displayName: Test
      inputs:
        command: 'test'
        projects: '**/*Tests/*.csproj'
        arguments: '--configuration $(buildConfiguration) --no-build'

# 2) Coverity SAST on Windows (MSBuild capture)
- stage: Coverity
  displayName: Coverity SAST
  dependsOn: Build
  jobs:
  - job: coverity_sast
    pool: { name: coverity-win }
    steps:
    - checkout: self
    - task: UseDotNet@2
      inputs: { packageType: 'sdk', version: '3.1.426' }
    - task: UseDotNet@2
      inputs: { packageType: 'sdk', version: '8.x' }
    - task: DownloadSecureFile@1
      name: covAuth
      inputs: { secureFile: 'auth-key.txt' }
    - powershell: |
        $ErrorActionPreference = 'Stop'
        $covRoot  = 'C:\Program Files\Coverity'
        $covBuild = Get-ChildItem -Path $covRoot -Recurse -Filter 'cov-build.exe' -ErrorAction SilentlyContinue | Select-Object -First 1 -ExpandProperty FullName
        if (-not $covBuild) { throw "cov-build.exe not found under $covRoot" }
        $covBin = Split-Path $covBuild -Parent
        $env:PATH = "$covBin;$env:PATH"
        Write-Host "Using Coverity bin: $covBin"
        New-Item -ItemType Directory -Force -Path "$(Build.ArtifactStagingDirectory)\logs" | Out-Null
        $logsDir = "$(Build.ArtifactStagingDirectory)\logs"
        $binlog  = Join-Path $logsDir "msbuild.binlog"
        $txtlog  = Join-Path $logsDir "msbuild.txt"
        $sln = Get-ChildItem -Path "$(Build.SourcesDirectory)" -Filter *.sln -Recurse | Select-Object -First 1
        if (-not $sln) { throw "No .sln found under $(Build.SourcesDirectory)" }
        dotnet restore "`"$($sln.FullName)`""
        if (Test-Path cov-int) { Remove-Item cov-int -Recurse -Force }
        cov-build --dir cov-int dotnet msbuild "`"$($sln.FullName)`"" /m `
          /t:Rebuild /p:Configuration=$(buildConfiguration) `
          /p:GenerateFullPaths=true /nr:false `
          /bl:"$binlog" "/flp:LogFile=$txtlog;verbosity=normal"
        if ($LASTEXITCODE -ne 0) { throw "Build failed. See $binlog / $txtlog." }
        cov-analyze --dir cov-int --all
        cov-format-errors --dir cov-int --html-output cov-html

        # Export files SRM can ingest
        cov-format-errors --dir cov-int --json-output-v10 coverity.json

        cov-commit-defects --dir cov-int `
          --url "$(COVERITY_URL)" `
          --stream "$(COVERITY_STREAM)" `
          --auth-key-file "$(covAuth.secureFilePath)" `
          --description "ADO $(Build.BuildNumber) $(Build.SourceVersion)" `
          --on-new-cert trust
      displayName: Capture, Analyze & Commit
    - task: PublishBuildArtifacts@1
      displayName: Publish diagnostic logs
      condition: always()
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/logs'
        ArtifactName: 'diag-logs'
    - task: PublishBuildArtifacts@1
      displayName: Publish Coverity HTML
      condition: succeeded()
      inputs:
        PathtoPublish: 'cov-html'
        ArtifactName: 'coverity-report'      
    - task: PublishBuildArtifacts@1
      displayName: Publish SRM inputs (Coverity)
      inputs:
        PathtoPublish: '$(Build.SourcesDirectory)'
        ArtifactName: 'srm-inputs'


# 3) Black Duck SCA on Linux
- stage: BlackDuck
  displayName: Black Duck SCA
  dependsOn: Coverity
  jobs:
  - job: bd_scan
    pool: { name: blackduck-linux }
    steps:
    - checkout: self
    - bash: |
        set -e
        curl -s -L https://detect.synopsys.com/detect9.sh -o detect.sh
        chmod +x detect.sh
        ./detect.sh \
          --blackduck.url="$(BD_URL)" \
          --blackduck.api.token="$(BD_API_TOKEN)" \
          --blackduck.trust.cert=true \
          --detect.project.name="@HooliCorp/vulnerable_net_core" \
          --detect.project.version.name="$(Build.SourceVersion)" \
          --detect.policy.check=true \
          --detect.cleanup=true \
          --detect.timeout=1200
      displayName: Black Duck Detect (SCA)
  
# 4) SRM ingest (robust CLI download)
- stage: SRM
  displayName: Software Risk Manager ingest
  dependsOn:
    - Coverity
    - BlackDuck
  variables:
  - group: srm-secrets    # SRM_BASE_URL, SRM_API_KEY, SRM_PROJECT_ID
  jobs:
  - job: srm_push
    displayName: Push findings to SRM
    pool: { name: blackduck-linux }
    steps:
    - checkout: none

    - task: DownloadBuildArtifacts@1
      displayName: Download SRM inputs
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'srm-inputs'
        downloadPath: '$(Pipeline.Workspace)'

    - bash: |
        set -euo pipefail
        cd "$(Pipeline.Workspace)/srm-inputs"

        # 1) Ensure we have an input for SRM
        FILES=""
        [ -f coverity.json ] && FILES="$FILES coverity.json"
        if [ -z "$FILES" ]; then
          echo "No SRM input files (coverity.json) found; nothing to upload."
          exit 0
        fi

        # 2) Find the correct Code Dx CLI asset (Linux) from GitHub
        TAG_API="https://api.github.com/repos/codedx/codedx-cli-client/releases/tags/v0.3.0"
        LATEST_API="https://api.github.com/repos/codedx/codedx-cli-client/releases/latest"

        find_url () {
          curl -fsSL "$1" | grep -Eo 'https://[^"]*codedx[^"]*linux[^"]*amd64[^"]*' | head -n1 || true
        }

        URL="$(find_url "$TAG_API")"
        [ -z "$URL" ] && URL="$(find_url "$LATEST_API")"

        if [ -z "$URL" ]; then
          echo "Could not locate a Linux CLI asset on GitHub Releases."
          exit 1
        fi

        echo "Downloading SRM CLI from: $URL"
        curl -fL "$URL" -o codedx-cli
        chmod +x codedx-cli

        # 3) TLS trust (demo/self-signed friendly)
        export SSL_CERT_FILE=/etc/ssl/certs/ca-certificates.crt

        # 4) Push results to SRM
        echo "Uploading to SRM project $(SRM_PROJECT_ID): $FILES"
        ./codedx-cli "$(SRM_BASE_URL)" \
          --api-key "api-key:$(SRM_API_KEY)" \
          --insecure \
          analyze "$(SRM_PROJECT_ID)" $FILES
      displayName: Upload results to SRM
